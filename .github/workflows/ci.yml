---
name: CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  supabase_database_checks:
    name: Supabase Database Checks
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4

      - name: Use Node.js LTS/Jod
        uses: actions/setup-node@v4
        with:
          node-version-file: ".node-version"
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install

      - name: Start Database
        run: pnpm run supabase db start

      - name: Run Database Tests
        run: pnpm run supabase test db

      - name: Verify generated types match Postgres schema
        run: |
          pnpm --silent run supabase gen types typescript --local > src/contexts/supabase/database.d.ts
          if ! git diff --ignore-space-at-eol --exit-code --quiet src/contexts/supabase/database.d.ts; then
            echo "Detected uncommitted changes after build. See status below:"
            git diff
            exit 1
          fi

  # TODO: enable again if functions are added
  supabase_functions_checks:
    name: Supabase Functions Checks
    runs-on: ubuntu-latest
    if: false
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x

      - name: Print Deno Version
        run: deno --version

      - name: Format Check
        run: deno task check-format-functions

      - name: Type Check
        run: deno task check-functions

      - name: Lint
        run: deno task lint-functions

      - name: Tests
        # TODO: enable again if tests are added to functions
        if: false
        run: deno task test-functions

  frontend_checks:
    name: Frontend Checks
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4

      - name: Use Node.js LTS/Jod
        uses: actions/setup-node@v4
        with:
          node-version-file: ".node-version"
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install

      - name: Build project
        run: pnpm run build

      - name: Lint project
        run: pnpm run lint

  supabase_tests:
    name: Supabase Tests
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4

      - name: Use Node.js LTS/Jod
        uses: actions/setup-node@v4
        with:
          node-version-file: ".node-version"
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install

      - name: Start Supabase
        run: |
          pnpm run supabase start > supabase_output.txt 2>&1
          echo "Supabase started successfully"
          pnpm run supabase migration up
          echo "Supabase migrations applied successfully"

      - name: Create Environment File
        run: |
          # Extract anon key and service key from Supabase output
          # Handle the exact format with leading spaces for anon key
          ANON_KEY=$(grep -E '^\s+anon key:' supabase_output.txt | sed 's/.*anon key: //')
          SERVICE_KEY=$(grep -E '^service_role key:' supabase_output.txt | sed 's/.*service_role key: //')

          # Fallback: extract JWT tokens directly if the above fails
          if [ -z "$ANON_KEY" ] || [ -z "$SERVICE_KEY" ]; then
            echo "Primary extraction failed, trying JWT pattern matching..."
            # Extract all JWT tokens and assign them based on position
            TOKENS=($(grep -oE 'eyJ[A-Za-z0-9_-]*\.[A-Za-z0-9_-]*\.[A-Za-z0-9_-]*' supabase_output.txt))
            if [ ${#TOKENS[@]} -ge 2 ]; then
              ANON_KEY=${TOKENS[0]}
              SERVICE_KEY=${TOKENS[1]}
            fi
          fi

          echo "VITE_SUPABASE_URL=http://localhost:54321" > .env.local
          echo "VITE_SUPABASE_ANON_KEY=$ANON_KEY" >> .env.local
          echo "DANGER_SUPABASE_SERVICE_KEY=$SERVICE_KEY" >> .env.local

          # Verify keys were extracted (show only first/last chars to avoid masking)
          echo "Extracted anon key: ${ANON_KEY:0:10}...${ANON_KEY: -10}"
          echo "Extracted service key: ${SERVICE_KEY:0:10}...${SERVICE_KEY: -10}"

      - name: Run unit tests
        run: TEST_SUPABASE=1 DESTRUCTIVE_SUPABASE=1 pnpm run test

      - name: Stop Supabase
        run: pnpm run supabase stop --no-backup
        if: always()

  supabase_deploy:
    name: Supabase Deploy
    runs-on: ubuntu-24.04
    needs: [supabase_database_checks, frontend_checks, supabase_tests]
    if: github.event_name == 'push'
    env:
      SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      SUPABASE_PROJECT_ID: ${{ secrets.SUPABASE_PROJECT_ID }}
      SUPABASE_DATABASE_PASSWORD: ${{ secrets.SUPABASE_DATABASE_PASSWORD }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4

      - name: Use Node.js LTS/Jod
        uses: actions/setup-node@v4
        with:
          node-version-file: ".node-version"
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install

      - run: pnpm run supabase link --project-ref $SUPABASE_PROJECT_ID
      - run: pnpm run supabase db push --password $SUPABASE_DATABASE_PASSWORD
      - run: pnpm run supabase functions deploy
        if: false

  frontend_deploy:
    name: Frontend Deploy
    runs-on: ubuntu-24.04
    needs: [supabase_database_checks, frontend_checks, supabase_tests]
    if: github.event_name == 'push'

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4

      - name: Use Node.js LTS/Jod
        uses: actions/setup-node@v4
        with:
          node-version-file: ".node-version"
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install

      - name: Install Vercel CLI
        run: pnpm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy Project Artifacts to Vercel
        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}
